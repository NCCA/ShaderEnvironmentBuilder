#ifndef _BUTTON_H__
#define _BUTTON_H__

#include <QDialog>
#include <QDialogButtonBox>
#include <QLabel>
#include <QDoubleSpinBox>
#include <QInputDialog>
#include <QGroupBox>
#include <QGridLayout>
#include <QLabel>
#include <QPushButton>
#include <QColor>
#include <QColorDialog>

#include <ngl/Vec4.h>
#include <ngl/Colour.h>
#include "ButtonLib.h"
#include "NGLScene.h"

QT_BEGIN_NAMESPACE
class QDialogButtonBox;
class QDoubleSpinBox;
class QLabel;
class QGridLayout;
class QLabel;
class QPushButton;
class QColor;
QT_END_NAMESPACE

//----------------------------------------------------------------------------------------------------------------------
/// @file Button.h
/// @brief this class creates a button with a pop up widget that can create modifiable
/// attributes
/// @author Jonny Lyddon
/// @version 1.1
/// @date 20/04/16
//----------------------------------------------------------------------------------------------------------------------

class ButtonLib;
class NGLScene;

//----------------------------------------------------------------------------------------------------------------------
/// @class Button
/// @brief Parent class of different button types to set uniform values
//----------------------------------------------------------------------------------------------------------------------
class Button : public QDialog
{
  Q_OBJECT

public:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief pointer to the button library parent
  //----------------------------------------------------------------------------------------------------------------------
  ButtonLib *m_libParent;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief pointer to the scene so that update can be called
  //----------------------------------------------------------------------------------------------------------------------
  NGLScene *m_sceneParent;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief pointer to the parent window to know where to attach to
  //----------------------------------------------------------------------------------------------------------------------
  QWidget *m_parent;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief button object to be pressed by user to open relevant widget
  //----------------------------------------------------------------------------------------------------------------------
  QPushButton *m_button;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief default constructor to create the button
  /// @param [in] the parent window is defaulted to nothing
  //----------------------------------------------------------------------------------------------------------------------
  Button(QWidget *parent=0);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief constructor to create the button, custom variables can also be assigned
  /// @param [in] name of the button to be used
  /// @param [in] the layout environment for the button to be attached to
  /// @param [in] the id used to access the button information
  /// @param [in] the parent window is defaulted to nothing
  //----------------------------------------------------------------------------------------------------------------------
  Button(QString _buttonName,
         GLenum _buttonType,
         QLayout *_layout,
         GLuint _id,
         ButtonLib *_libParent,
         NGLScene *_sceneParent,
         QWidget *parent=0);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief returns the current button name
  /// @return m_buttonName
  //----------------------------------------------------------------------------------------------------------------------
  QString getName() {return m_buttonName;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief returns the current button type
  /// @return m_buttonType
  //----------------------------------------------------------------------------------------------------------------------
  GLenum getTypeEnum() {return m_buttonType;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief sets the current ID for the button, from its' shader location
  /// @param [in] the location ID for the button id
  //----------------------------------------------------------------------------------------------------------------------
  void setID(unsigned int _id) {m_id=_id;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief returns the button ID, this will change based on shader location
  /// @return m_id
  //----------------------------------------------------------------------------------------------------------------------
  GLuint getID() {return m_id;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief sets the colour to be used by colour buttons
  /// @param [in] the colour to be set within the colourButton class
  //----------------------------------------------------------------------------------------------------------------------
  virtual void setColour(ngl::Vec4 _col) {return;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief overloaded function to set the colour
  /// @param [in] the colour to be set within the colourButton class
  //----------------------------------------------------------------------------------------------------------------------
  virtual void setColour(QColor _col) {return;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief returns the colour, stored by the button
  /// @return m_colour
  //----------------------------------------------------------------------------------------------------------------------
  virtual ngl::Vec4 getColour() {return ngl::Vec4();}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief returns the QColour, stored by the button
  /// @return m_colour
  virtual QColor getColourQ() {return QColor();}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief sets the value to be for float attributes
  /// @param [in] the value to be set within the floatButton class
  //----------------------------------------------------------------------------------------------------------------------
  virtual void setValue(float _val) {return;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief returns the value, stored by the button
  /// @return m_value
  //----------------------------------------------------------------------------------------------------------------------
  virtual float getValue() {return float();}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief prints the button attribute values
  //----------------------------------------------------------------------------------------------------------------------
  virtual void printValues();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief returns the Vec4 held by the vector button class
  /// @return m_value
  //----------------------------------------------------------------------------------------------------------------------
  virtual ngl::Vec4 getVec() {return ngl::Vec4();}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief sets the vector value for Vec3s or positions
  /// @param [in] _value to be set within the VecButton class
  //----------------------------------------------------------------------------------------------------------------------
  virtual void setVec(ngl::Vec4 _value) {return;}

private:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief string to hold button's name
  //----------------------------------------------------------------------------------------------------------------------
  QString m_buttonName;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief enum for the button type, used for defining type
  //----------------------------------------------------------------------------------------------------------------------
  GLenum m_buttonType;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief id to access specific buttons and shader locations
  //----------------------------------------------------------------------------------------------------------------------
  unsigned int m_id;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief button box used to activate the opening of the widget
  //----------------------------------------------------------------------------------------------------------------------
  QDialogButtonBox *m_buttonBox;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief layout for the button box to be stored within
  //----------------------------------------------------------------------------------------------------------------------
  QGridLayout *m_gridLayout;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief function to create the button box for the pop up
  /// @param [in] button name
  //----------------------------------------------------------------------------------------------------------------------
  void createButtonBox(QString _buttonName="Select &Colour");


private slots:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a slot to open a widget upon button press event
  //----------------------------------------------------------------------------------------------------------------------
  virtual void openBox() {return;}

};

//-----------------------------------------------------------------------------------------------------------------------
/// @class ColourButton
/// @brief Button to set colour uniform values
//-----------------------------------------------------------------------------------------------------------------------
class ColourButton : public Button
{
    Q_OBJECT

public:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief constructor from button class
  //----------------------------------------------------------------------------------------------------------------------
  using Button::Button;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief sets the picked colour and colour attribute to the colour input
  /// @param [in] colour value
  //----------------------------------------------------------------------------------------------------------------------
  void setColour(QColor _col);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief sets the colour attribute to the colour input
  /// @param [in] colour value
  //----------------------------------------------------------------------------------------------------------------------
  void setColour(ngl::Vec4 _col);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief returns the colour, stored by the button
  /// @return m_colour
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec4 getColour() {return m_colour;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief returns the QColor, stored by the button
  /// @return m_colourPicked
  //----------------------------------------------------------------------------------------------------------------------
  QColor getColourQ() {return m_colourPicked;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief print the attribute data stored within the colour attriubte for debugging
  //----------------------------------------------------------------------------------------------------------------------
  void printAttributes();

private:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief vector to store colour attributes
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec4 m_colour;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief colour used to store attributes from colour picker
  //----------------------------------------------------------------------------------------------------------------------
  QColor m_colourPicked;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief colour box to select colours
  //----------------------------------------------------------------------------------------------------------------------
  QColorDialog *m_colourGroupBox;

private slots:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a slot to open a colour widget upon button press event
  //----------------------------------------------------------------------------------------------------------------------
  void openBox();

};

//----------------------------------------------------------------------------------------------------------------------
/// @class FloatButton
/// @brief Button to set float uniform values
//----------------------------------------------------------------------------------------------------------------------
class FloatButton : public Button
{
    Q_OBJECT

public:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief constructor from button class
  //----------------------------------------------------------------------------------------------------------------------
  using Button::Button;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief sets the value of the float
  //----------------------------------------------------------------------------------------------------------------------
  void setValue(float _val) {m_value=_val;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief returns the value, stored by the button
  /// @return m_value
  //----------------------------------------------------------------------------------------------------------------------
  float getValue() {return m_value;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief print the attribute data stored within the float attribute for debugging
  //----------------------------------------------------------------------------------------------------------------------
  void printAttributes();

private:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief float to store attribute value
  //----------------------------------------------------------------------------------------------------------------------
  float m_value;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief window to hold float slider
  //----------------------------------------------------------------------------------------------------------------------
  QDialog *m_window;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief creates a frame with a tile to hold float slider
  //----------------------------------------------------------------------------------------------------------------------
  QGroupBox *m_sliderGroupBox;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief layout to hold float slider widget
  //----------------------------------------------------------------------------------------------------------------------
  QGridLayout *m_sliderLayout;

private slots:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a slot to open float widget upon button press event
  //----------------------------------------------------------------------------------------------------------------------
    void openBox();
};


//----------------------------------------------------------------------------------------------------------------------
/// @class VecButton
/// @brief Button to set vec3 and positional values
///
/// Originally implemented for vec3 values to set custom values. This could be for
/// things like camera position etc.
/// @bug The values open and get set as expected, these are passed off to the parser.
/// Upon printing the values of the uniforms they are the same as what's being held
/// in the button, however do not seem to update within the gl scene.
//----------------------------------------------------------------------------------------------------------------------
class VecButton : public Button
{
  Q_OBJECT

public:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief constructor from button class
  //----------------------------------------------------------------------------------------------------------------------
  using Button::Button;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief runs all the necessary functions for the pop up window
  /// @param [in] _value
  //----------------------------------------------------------------------------------------------------------------------
  void setUpButton(ngl::Vec3 _vector);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief sets m_value to the input value
  /// @param [in] _value
  //----------------------------------------------------------------------------------------------------------------------
  void setVec(ngl::Vec4 _value){m_value=_value;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief returns the vector value
  /// @return m_value;
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec4 getVec(){return m_value;}

private:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief window for the layout to hold float values
  //----------------------------------------------------------------------------------------------------------------------
  QDialog *m_vecWindow;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief layout to hold spin boxes and labels for float values
  //----------------------------------------------------------------------------------------------------------------------
  QGridLayout *m_vecLayout;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief X label for float
  //----------------------------------------------------------------------------------------------------------------------
  QLabel *m_xName;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Y label for float
  //----------------------------------------------------------------------------------------------------------------------
  QLabel *m_yName;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Z label for float
  //----------------------------------------------------------------------------------------------------------------------
  QLabel *m_zName;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Spin box for X value
  //----------------------------------------------------------------------------------------------------------------------
  QDoubleSpinBox *m_xSpinBox;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Spin box for Y value
  //----------------------------------------------------------------------------------------------------------------------
  QDoubleSpinBox *m_ySpinBox;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Spin box for Z value
  //----------------------------------------------------------------------------------------------------------------------
  QDoubleSpinBox *m_zSpinBox;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Buttonbox for standard ok button
  //----------------------------------------------------------------------------------------------------------------------
  QDialogButtonBox *m_buttonBox_ok;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Buttonbox for standard cancel button
  //----------------------------------------------------------------------------------------------------------------------
  QDialogButtonBox *m_buttonBox_cancel;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief vec4 value to store attributes
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec4 m_value;

private slots:
//----------------------------------------------------------------------------------------------------------------------
/// @brief a slot to open vec widget upon button press event
//----------------------------------------------------------------------------------------------------------------------
  void openBox();
};


#endif //_BUTTON_H__
