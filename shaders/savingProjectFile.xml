<?xml version="1.0" encoding="utf-8"?>
<Shader_Data Name="savingProjectFile" Dir="/home/i7685565/0Features-0BugsCVA3/shaders">
	<Vertex VtxData="#version 330 core
/// @brief flag to indicate if model has unit normals if not normalize
uniform bool Normalize;
// the eye position of the camera
uniform vec3 viewerPos;
/// the colour of to use instead of material colour
uniform vec4 Colour;

/// @brief the current fragment normal for the vert being processed
out vec3 fragmentNormal;
/// @brief the vertex passed in
in vec3 inVert;
/// @brief the normal passed in
in vec3 inNormal;
/// @brief the in uv
in vec2 inUV;


struct Materials
{
  vec4 ambient;
  vec4 diffuse;
  vec4 specular;
  float shininess;
};


struct Lights
{
    vec4 position;
    vec3 direction;
    vec4 ambient;
    vec4 diffuse;
    vec4 specular;
    float spotCosCutoff;
    float spotCosInnerCutoff;
    float spotExponent;
    float constantAttenuation;
    float linearAttenuation;
    float quadraticAttenuation;
};
// our material
uniform Materials material;
// array of lights
uniform Lights light;
// direction of the lights used for shading
out vec3 lightDir;
// out the blinn half vector
out vec3 halfVector;
out vec3 eyeDirection;
out vec3 vPosition;

uniform mat4 MV;
uniform mat4 MVP;
uniform mat3 normalMatrix;
uniform mat4 M;


void main()
{
// calculate the fragments surface normal
fragmentNormal = (normalMatrix*inNormal);


if (Normalize == true)
{
 fragmentNormal = normalize(fragmentNormal);
}
// calculate the vertex position
gl_Position = MVP*vec4(inVert,1.0);

vec4 worldPosition = M * vec4(inVert, 1.0);
eyeDirection = normalize(viewerPos - worldPosition.xyz);
// Get vertex position in eye coordinates
// Transform the vertex to eye co-ordinates for frag shader
/// @brief the vertex in eye co-ordinates  homogeneous
vec4 eyeCord=MV*vec4(inVert,1);

vPosition = eyeCord.xyz / eyeCord.w;;

float dist;

lightDir=vec3(light.position.xyz-eyeCord.xyz);
dist = length(lightDir);
lightDir/= dist;
halfVector = normalize(eyeDirection + lightDir);

}

"/>
	<Fragment FragData="#version 330 core

/// @brief[in] the vertex normal
in vec3 fragmentNormal;
/// @brief our output fragment colour
out vec4 fragColour;

/// @brief material structure
struct Materials
{
  vec4 ambient;
  vec4 diffuse;
  vec4 specular;
  float shininess;
};

// @brief light structure
struct Lights
{
    vec4 position;
    vec3 direction;
    vec4 ambient;
    vec4 diffuse;
    vec4 specular;
    float spotCosCutoff;
    float spotCosInnerCutoff;
    float spotExponent;
    float constantAttenuation;
    float linearAttenuation;
    float quadraticAttenuation;
};
// @param material passed from our program
uniform Materials material;

uniform Lights light;
in vec3 lightDir;
// out the blinn half vector
in vec3 halfVector;
in vec3 eyeDirection;
in vec3 vPosition;

/// the colour of to use instead of material colour
uniform vec4 Colour;

vec4 pointLight()
{
  vec3 N = normalize(fragmentNormal);
  vec3 halfV;
  float ndothv;
  float attenuation;
  vec3 E = normalize(eyeDirection);
  vec3 L = normalize(lightDir);
  float lambertTerm = dot(N,L);
  vec4 diffuse=vec4(0.08,0.2,0.04,1.0);
  vec4 ambient=vec4(0.03,0.02,0.02,1.0);
  vec4 specular=vec4(0);
  if (lambertTerm &gt; 0.0)
  {
  float d;            // distance from surface to light position
  vec3 VP;            // direction from surface to light position

  // Compute vector from surface to light position
  VP = vec3 (light.position) - vPosition;

  // Compute distance between surface and light position
    d = length (VP);
    attenuation = 1.f / (light.constantAttenuation +
                       light.linearAttenuation * d +
                       light.quadraticAttenuation * d * d);

    diffuse+=Colour*light.diffuse*lambertTerm*attenuation;
    ambient+=material.ambient*light.ambient*attenuation;
    halfV = normalize(halfVector);
    ndothv = max(dot(N, halfV), 0.0);
    specular+=(material.specular*6.5)*light.specular*pow(ndothv, (material.shininess*120.0))* attenuation;
  }
return (ambient*0.55) + diffuse + specular;
}


void main ()
{

fragColour=pointLight();
}


"/>
</Shader_Data>

